name: Python wheels

on:
  release:
    types:
      - published
  workflow_dispatch:
  issue_comment:
    types:
      - created

jobs:
  create_sdist:
    name: Create 🐍 sdist
    if: ${{(startsWith(github.event.comment.body, '/build_wheels') && github.event.issue.pull_request) || github.event_name == 'workflow_dispatch'}}
    runs-on: ubuntu-24.04

    steps:
      # ref: https://github.com/actions/checkout/issues/331#issuecomment-707103442
      - name: Get pull request
        if: ${{ github.event.issue.pull_request }}
        uses: actions/github-script@v7
        id: get-pr
        with:
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            };
            core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`);
            try {
              const result = await github.rest.pulls.get(request);
              return result.data;
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`);
            }

      - name: Checkout MR
        if: ${{ github.event.issue.pull_request }}
        uses: actions/checkout@v4
        with:
          repository: ${{ fromJSON(steps.get-pr.outputs.result).head.repo.full_name }}
          ref: ${{ fromJSON(steps.get-pr.outputs.result).head.sha }}
          submodules: true

      - name: Checkout
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Disable local version for TestPyPI upload
        if: github.event_name == 'workflow_dispatch'
        run: echo SETUPTOOLS_SCM_OVERRIDES_FOR_OVERLAP='{ local_scheme = "no-local-version" }' >> "$GITHUB_ENV"
        shell: bash

      - name: Trigger response
        if: ${{ github.event.issue.pull_request }}
        uses: actions/github-script@v7
        id: trigger-response
        with:
          script: |
            const msg = 'Triggered [building of 🐍 sdist](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) via action...';
            try {
              const result = await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: msg,
              });
              return result.data;
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`);
            }
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Dependencies
        run: python -m pip install build twine

      - name: Create sdist
        id: build-sdist
        run: python -m build --sdist

      - name: Check metadata
        id: check-metadata
        run: twine check dist/*

      - name: Notify via comment
        if: ${{ github.event.issue.pull_request }}
        uses: actions/github-script@v7
        env:
          STEP_STATUS: ${{steps.check-metadata.outcome}}
        with:
          script: |
            try {
              const result = await github.rest.issues.getComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: ${{ fromJSON(steps.trigger-response.outputs.result).id }},
              });

              let msg = result.data.body;
              if(process.env.STEP_STATUS == 'success') {
                msg += 'successful :heavy_check_mark:';
              } else {
                msg += 'failed :x:';
              }

              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: ${{ fromJSON(steps.trigger-response.outputs.result).id }},
                body: msg,
              });
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`);
            }

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-sdist
          path: dist/*.tar.gz
          retention-days: 2

  build_wheels:
    name: Build 🐍 wheels on ${{ matrix.os }}
    if: ${{ (startsWith(github.event.comment.body, '/build_wheels') && github.event.issue.pull_request) || github.event_name == 'workflow_dispatch' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, ubuntu-24.04-arm, macos-13, macos-14, windows-2022]

    steps:
      # ref: https://github.com/actions/checkout/issues/331#issuecomment-707103442
      - name: Get pull request
        if: ${{ github.event.issue.pull_request }}
        uses: actions/github-script@v7
        id: get-pr
        with:
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            };
            core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`);
            try {
              const result = await github.rest.pulls.get(request);
              return result.data;
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`);
            }

      - name: Checkout MR
        if: ${{ github.event.issue.pull_request }}
        uses: actions/checkout@v4
        with:
          repository: ${{ fromJSON(steps.get-pr.outputs.result).head.repo.full_name }}
          ref: ${{ fromJSON(steps.get-pr.outputs.result).head.sha }}
          submodules: true

      - name: Checkout
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Trigger response
        if: ${{ github.event.issue.pull_request }}
        uses: actions/github-script@v7
        id: trigger-response
        with:
          script: |
            const msg = 'Triggered [building of 🐍 wheels on ${{ matrix.os }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) via action...';
            try {
              const result = await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: msg,
              });
              return result.data;
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`);
            }

      - name: Disable local version for TestPyPI upload
        if: github.event_name == 'workflow_dispatch'
        run: echo SETUPTOOLS_SCM_OVERRIDES_FOR_OVERLAP='{ local_scheme = "no-local-version" }' >> "$GITHUB_ENV"
        shell: bash

      - name: Build wheels
        id: build-wheels
        uses: pypa/cibuildwheel@v3.0.1
        with:
          output-dir: dist

      - name: Notify via comment
        if: ${{ github.event.issue.pull_request }}
        uses: actions/github-script@v7
        env:
          STEP_STATUS: ${{ steps.build-wheels.outcome }}
        with:
          script: |
            try {
              const result = await github.rest.issues.getComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: ${{ fromJSON(steps.trigger-response.outputs.result).id }},
              });

              let msg = result.data.body;
              if(process.env.STEP_STATUS == 'success') {
                msg += 'successful :heavy_check_mark:';
              } else {
                msg += 'failed :x:';
              }

              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: ${{ fromJSON(steps.trigger-response.outputs.result).id }},
                body: msg,
              });
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`);
            }

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-wheels-${{ matrix.os }}
          path: ./dist/*.whl
          retention-days: 2

  publish:
    name: Upload release to PyPI
    needs: [create_sdist, build_wheels]
    runs-on: ubuntu-24.04
    environment: testpypi
    permissions:
      id-token: write
      attestations: write
      contents: read

    steps:
      - name: Download sdist/wheels
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ github.event.repository.name }}-*
          path: dist
          merge-multiple: true

      - name: Generate artifact attestations
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "dist/*"

      - name: Publish package to TestPyPI
        if: github.event_name == 'workflow_dispatch'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

      - name: Publish package to PyPI
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: pypa/gh-action-pypi-publish@release/v1
